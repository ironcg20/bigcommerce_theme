{
  "maintenance.scss": "@import \"tools/tools\";\n\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    -webkit-align-items: center;\n    align-items: center;\n    background: #888 url(\"../img/coming-soon.jpg\") no-repeat center center;\n    background-size: cover;\n\n    -ms-box-orient: horizontal;\n    color: #798289;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    -ms-flex-pack: space-around;\n    font-family: Helvetica, Arial, Sans-Serif;\n    font-size: 0.8em;\n    height: 100vh;\n\n    -webkit-justify-content: space-around;\n    justify-content: space-around;\n    line-height: 1.5em;\n    margin: 0;\n    min-height: 480px;\n    min-width: 320px;\n    padding: 20px 30px;\n}\n\nmain {\n  background-color: #fff;\n  box-shadow: 0 2px 0 0 rgba(0, 0, 0, 0.07);\n  display: block;\n  padding: 20px 30px;\n  text-align: center;\n}\n\n.header-logo-image-container{\n    width: get-width(stencilString('logo_size'));\n    margin: auto;\n}\n\n.logo{flex: 1 1 100%; margin-bottom: 20px;}\n.logo img{max-width: 100%;}\n\nsection {\n    margin-bottom: 40px;\n}\n\nfieldset {\n    border: 0;\n    padding: 0;\n}\n\nlegend {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute !important;\n    width: 1px;\n}\n\nlabel,\ninput {\n    display: block;\n    height: 30px;\n    line-height: 30px;\n    width: 100%;\n}\n\nlabel {\n    color: #313b47;\n    font-size: 14px;\n    font-weight: bold;\n    text-align: center;\n}\n\ninput {\n    -webkit-appearance: none;\n    border-radius: 2px;\n    border-style: solid;\n    width: 100%;\n}\n\ninput[type=text] {\n    background-color: #f7f8f9;\n    border: 1px solid #e1e6eb;\n    margin-bottom: 1rem;\n    padding: 0 1em;\n}\n\ninput[type=submit] {\n    background: #00abc9;\n    border: 0;\n    color: #fff;\n    cursor: pointer;\n    font-size: 12px;\n    padding: 0 15px;\n}\n\na {\n    color: #00b9d3;\n    margin: 0 5px;\n    text-decoration: none;\n}\n\nh1 {\n    color: #3c4043;\n    font-size: 24px;\n    font-weight: 300;\n    margin-top: 15px;\n}\n\ndiv p {\n    margin-bottom: 0;\n    margin-top: 0;\n}\n\n.form-field--error {\n    margin-bottom: 1rem;\n}\n\n.form-field--error input[type=text] {\n    margin-bottom: 0;\n}\n\n.form-field--error .form-inlineMessage {\n    color: #ac0005;\n    margin-top: 0.375rem;\n    width: 100%;\n}\n\n.powered-by {\n    color: #acb3be;\n    font-size: 11px;\n    font-style: italic;\n    line-height: 24px;\n}\n\n.powered-by a {\n    background: url(\"../img/bc_logo_sprite.png\") 0 -75px no-repeat;\n    display: inline-block;\n    height: 22px;\n    opacity: 0.7;\n    text-indent: -9999px;\n    width: 95px;\n}\n\n.powered-by a:hover {\n    opacity: 1;\n}\n\n@media screen and (min-width: 540px) {\n    body {\n        font-size: 1em;\n    }\n\n    main {\n        margin: 0 auto;\n        padding: 45px 60px;\n        width: 500px;\n    }\n\n    label,\n    input {\n        display: inline-block;\n        margin-right: 10px;\n        width: auto;\n    }\n\n    label {\n        text-align: left;\n    }\n\n    input[type=text] {\n        margin-bottom: 0;\n        margin-right: 10px;\n    }\n\n    .form-field {\n        display: inline-block;\n        position: relative;\n    }\n\n    .form-field--error .form-inlineMessage {\n        left: 100px;\n        position: absolute;\n        top: 30px;\n    }\n}\n",
  "tools/tools.scss": "@import \"list\";\n@import \"string\";\n@import \"image\";\n@import \"theme_focus\";\n",
  "tools/list.scss": "@function contains($list, $var) {\n    @return index($list, $var) != null;\n}\n",
  "tools/image.scss": "///\n/// Calculate the required `padding-bottom` value to reserve page space for an image of a given size, represented by `$size`.\n///\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\n///\n/// @return {Number} - A percentage indicating the appropriate value of `padding-bottom`.\n///\n@function get-padding($size) {\n    $list: str-split($size, \"x\");\n\n    $width: to-number(nth($list, 1));\n    $height: to-number(nth($list, 2));\n\n    @return percentage($height/$width);\n}\n\n///\n/// Returns a string representing the width (in pixels) of an image with size `$size`.\n///\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\n///\n/// @return {String} - A string of the form 'Xpx'\n///\n@function get-width($size) {\n    $list: str-split($size, \"x\");\n\n    @return nth($list, 1) + \"px\";\n}\n\n///\n/// Returns a string representing the width (in pixels) of an image with size `$size`.\n///\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\n///\n/// @return {String} - A string of the form 'Ypx'\n///\n@function get-height($size) {\n    $list: str-split($size, \"x\");\n\n    @return nth($list, 2) + \"px\";\n}\n",
  "tools/string.scss": "// http://sassmeister.com/gist/1b4f2da5527830088e4d\n@function str-replace($string, $search, $replace: \"\") {\n    $index: str-index($string, $search);\n\n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n}\n\n// https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass\n///\n/// Split `$string` into a list of two strings at the first occurrence of `$separator`.\n///\n/// @param {String} $string - The string to be split\n/// @param {String} $separator - Character indicating where the split should occur\n///\n/// @return {List} - A list of the two created strings. The second string will be null if `$separator` is not found.\n///\n@function str-split($string, $separator) {\n\n    $index: str-index($string, $separator);\n\n    @if not $index {\n        @return $string \"\";\n    }\n\n    $str-1: str-slice($string, 1, $index - 1);\n    $str-2: str-slice($string, $index + 1);\n\n    @return $str-1 $str-2;\n}\n\n// https://www.sassmeister.com/gist/9fa19d254864f33d4a80\n///\n/// Converts a String representation of a number into a Number\n///\n/// @param {String} $value - The String to be converted\n///\n/// @return {Number} - The converted Number\n///\n@function to-number($value) {\n    @if type-of($value) == \"number\" {\n        @return $value;\n    } @else if type-of($value) != \"string\" {\n        $_: log(\"Value for `to-number` should be a number or a string.\");\n    }\n\n    $result: 0;\n    $digits: 0;\n    $minus: str-slice($value, 1, 1) == \"-\";\n    $numbers: (\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9);\n\n    @for $i from if($minus, 2, 1) through str-length($value) {\n        $character: str-slice($value, $i, $i);\n\n        @if not (index(map-keys($numbers), $character) or $character == \".\") {\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n        }\n\n        @if $character == \".\" {\n            $digits: 1;\n        } @else if $digits == 0 {\n            $result: $result * 10 + map-get($numbers, $character);\n        } @else {\n            $digits: $digits * 10;\n            $result: $result + map-get($numbers, $character) / $digits;\n        }\n    }\n\n    @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n    $units: (\"px\": 1px, \"cm\": 1cm, \"mm\": 1mm, \"%\": 1%, \"ch\": 1ch, \"pc\": 1pc, \"in\": 1in, \"em\": 1em, \"rem\": 1rem, \"pt\": 1pt, \"ex\": 1ex, \"vw\": 1vw, \"vh\": 1vh, \"vmin\": 1vmin, \"vmax\": 1vmax);\n\n    @if not index(map-keys($units), $unit) {\n        $_: log(\"Invalid unit `#{$unit}`.\");\n    }\n\n    @return $value * map-get($units, $unit);\n}\n",
  "tools/theme_focus.scss": "// =============================================================================\n// THEME FOCUS (global)\n// =============================================================================\n\n$outline-width:  stencilString('focus_outline');\n$outline-style:  solid;\n$outline-color:  #0f7fff;\n$outline-offset: 1px;\n\ninput,\nbutton,\ntextarea,\nselect,\ndetails,\n[href],\n[tabindex]:not([tabindex=\"-1\"]),\n[contenteditable=\"true\"] {        \n    &:focus {\n        outline: $outline-width $outline-style $outline-color !important;\n        outline-offset: $outline-offset !important;        \n    }\n}\n\nlabel {\n    input:focus + & {\n        outline: $outline-width $outline-style $outline-color !important;\n        outline-offset: $outline-offset !important;        \n    }\n}\n"
}
